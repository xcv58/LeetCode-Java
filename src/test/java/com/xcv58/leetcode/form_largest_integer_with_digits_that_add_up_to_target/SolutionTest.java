package com.xcv58.leetcode.form_largest_integer_with_digits_that_add_up_to_target;

import static org.junit.Assert.*;

import org.junit.Test;

public class SolutionTest {

  @Test
  public void test() {
    Solution solution = new Solution();
    assertEquals(
      "322111111111",
      solution.largestNumber(
        new int[] { 6, 10, 15, 53, 43, 53, 51, 47, 43 },
        89
      )
    );
    assertEquals(
      "7772",
      solution.largestNumber(new int[] { 4, 3, 2, 5, 6, 7, 2, 5, 5 }, 9)
    );
    assertEquals(
      "85",
      solution.largestNumber(new int[] { 7, 6, 5, 5, 5, 6, 8, 7, 8 }, 12)
    );
    assertEquals(
      "0",
      solution.largestNumber(new int[] { 2, 4, 6, 2, 4, 6, 4, 4, 4 }, 5)
    );
    assertEquals(
      "32211",
      solution.largestNumber(
        new int[] { 6, 10, 15, 40, 40, 40, 40, 40, 40 },
        47
      )
    );
    assertEquals(
      "9993",
      solution.largestNumber(new int[] { 5, 4, 4, 5, 5, 5, 5, 5, 5 }, 19)
    );
    assertEquals(
      "666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666665",
      solution.largestNumber(new int[] { 2, 4, 2, 5, 3, 2, 5, 5, 4 }, 739)
    );
    assertEquals(

      solution.largestNumber(new int[] { 2, 4, 6, 2, 4, 6, 4, 4, 4 }, 1000)
    );
  }
}

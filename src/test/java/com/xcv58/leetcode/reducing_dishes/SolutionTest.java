package com.xcv58.leetcode.reducing_dishes;

import static org.junit.Assert.*;

import org.junit.Test;

public class SolutionTest {

  @Test
  public void test() {
    Solution solution = new Solution();
    assertEquals(0, solution.maxSatisfaction(null));
    assertEquals(0, solution.maxSatisfaction(new int[] {}));
    assertEquals(0, solution.maxSatisfaction(new int[] { 0 }));
    assertEquals(0, solution.maxSatisfaction(new int[] { 0, -1, -2, -3 }));
    assertEquals(2, solution.maxSatisfaction(new int[] { 0, -1, -2, -3, 1 }));
    assertEquals(20, solution.maxSatisfaction(new int[] { 4, 3, 2 }));
    assertEquals(14, solution.maxSatisfaction(new int[] { -1, -8, 0, 5, -9 }));
    assertEquals(
      35,
      solution.maxSatisfaction(new int[] { -2, 5, -1, 0, 3, -3 })
    );
    assertEquals(
      9459,
      solution.maxSatisfaction(
        new int[] { -2, 5, -1, 0, 3, -3, 889, 11, -119, -200, -11 }
      )
    );
    assertEquals(
      10053,
      solution.maxSatisfaction(
        new int[] { -2, 5, -1, 0, 3, -3, 889, 11, -119, -200, -11, -99 }
      )
    );
    assertEquals(
      10539,
      solution.maxSatisfaction(
        new int[] { -2, 5, -1, 0, 3, -3, 889, 11, -119, -200, -11, -99, -102 }
      )
    );
    assertEquals(
      10722,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -11,
          -99,
          -102,
          -194,
        }
      )
    );
    assertEquals(
      10736,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -11,
          -99,
          -102,
          -194,
          -190,
        }
      )
    );
    assertEquals(
      10920,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
        }
      )
    );
    assertEquals(
      10920,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
        }
      )
    );
    assertEquals(
      11044,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
        }
      )
    );
    assertEquals(
      11089,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
        }
      )
    );
    assertEquals(
      11101,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
        }
      )
    );
    assertEquals(
      11101,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
        }
      )
    );
    assertEquals(
      11148,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
        }
      )
    );
    assertEquals(
      11160,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
          -133,
        }
      )
    );
    assertEquals(
      11160,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
          -133,
          -155,
        }
      )
    );
    assertEquals(
      11160,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
          -133,
          -145,
        }
      )
    );
    assertEquals(
      11161,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
          -133,
          -132,
        }
      )
    );
    assertEquals(
      11160,
      solution.maxSatisfaction(
        new int[] {
          -2,
          5,
          -1,
          0,
          3,
          -3,
          889,
          11,
          -119,
          -200,
          -201,
          -11,
          -99,
          -102,
          -194,
          -190,
          -129,
          -130,
          -145,
          -155,
          -169,
          -128,
          -133,
          -133,
        }
      )
    );
  }
}
